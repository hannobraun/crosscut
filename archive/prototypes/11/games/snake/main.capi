# Main loop
main: fn
    br size_x: Number, size_y: Number ->
        size_x
        size_y
        tile_field_size
        vec_store
        init_frame_count
        init
        main_inner
    end
end

main_inner: fn
    br ->
        draw
        count_frame
        update
        main_inner
    end
end

# Draw
draw: fn
    br ->
        clear_pixels
        draw_snake
        draw_food
        # This blocks until the display system is ready to process the
        # next frame.
        submit_frame
    end
end

# Draw - clear pixels
clear_pixels: fn
    br ->
        init_tile_index clear_pixels_inner
    end
end

clear_pixels_inner: fn
    br tile_x, tile_y ->
        # This is a recursive function, so we might have been at
        # it for a while, if we make it here. Check if the tile
        # index has gone beyond the last tile, which would let
        # us know that we're done.
        tile_y
        check_tile_index
        fn
            br 0 ->
                # Done.
            end

            br _ ->
                # Apparently we're not done yet.
                tile_x
                tile_y
                0
                0
                0
                255
                set_pixel
                tile_x
                tile_y
                increment_tile_index
                clear_pixels_inner
            end
        end
            eval
    end
end

draw_snake: fn
    br ->
        0 _draw_snake_inner
    end
end

_draw_snake_inner: fn
    br index ->
        positions
        vec_buf_len
        index
        greater_s8
        fn
            br index_is_within_bounds ->
                index_is_within_bounds
                index
                _draw_snake_draw_rest_of_snake
            end
        end
            eval
    end
end

_draw_snake_draw_rest_of_snake: fn
    br 0, _ ->
        # Index is out of bounds. We're done.
    end

    br 1, index ->
        # Index is valid. Continue drawing the snake.
        index
        _draw_snake_draw_body_segment
        index
        1
        add_u8
        _draw_snake_inner
    end
end

_draw_snake_draw_body_segment: fn
    br index ->
        positions
        index
        vec_buf_get
        _draw_snake_body_color
        set_pixel
    end
end

_draw_snake_body_color: fn
    br ->
        0 255 0 255
    end
end

draw_food: fn
    br ->
        food_position
        vec_load
        255
        0
        0
        255
        set_pixel
    end
end

# Draw - write tiles - tile index
init_tile_index: fn
    br ->
        0 0
    end
end

check_tile_index: fn
    br tile_y ->
        tile_field_size
        vec_load
        vec_y
        tile_y
        # Leave zero, if the y-coordinate has advanced beyond the last
        # line of the tile field. Otherwise, leave non-zero value.
        sub_s32
    end
end

increment_tile_index: fn
    br tile_x, tile_y ->
        tile_x
        _increment_tile_index_increment_coord
        _increment_tile_index_is_tile_x_within_limit
        _increment_tile_index_reset_x_if_overflowed
        tile_y
        _increment_tile_index_increment_y_if_necessary
    end
end

_increment_tile_index_increment_coord: fn
    br coord ->
        coord 1 add_u8
    end
end

_increment_tile_index_is_tile_x_within_limit: fn
    br tile_x ->
        tile_field_size
        vec_load
        vec_x
        tile_x
        greater_u8
        fn
            br tile_x_within_limit ->
                tile_x
                tile_x_within_limit
            end
        end
            eval
    end
end

_increment_tile_index_reset_x_if_overflowed: fn
    br _, 0 ->
        0 0
    end

    br tile_x, 1 ->
        tile_x 1
    end
end

_increment_tile_index_increment_y_if_necessary: fn
    br tile_x, 0, tile_y ->
        tile_x
        tile_y
        _increment_tile_index_increment_coord
    end

    br tile_x, 1, tile_y ->
        tile_x tile_y
    end
end

# Tile field size
is_out_of_bounds: fn
    br x, y ->
        tile_field_size
        vec_load
        fn
            br limit_x, limit_y ->
                x
                limit_x
                _is_out_of_bounds_is_coord_within_bounds
                y
                limit_y
                _is_out_of_bounds_is_coord_within_bounds
                and
                not
            end
        end
            eval
    end
end

_is_out_of_bounds_is_coord_within_bounds: fn
    br coord, limit ->
        coord
        0
        greater_u8
        limit
        coord
        greater_u8
        and
    end
end

# Frame count
init_frame_count: fn
    br ->
        1
        frame_count
        store
    end
end

count_frame: fn
    br ->
        # Grab the current frame count.
        frame_count
        load
        # Increment the frame count.
        1
        add_s32
        # Place a copy of the new frame count back where it came
        # from.
        copy
        frame_count
        store
        _count_frame_reset_frame_count_if_necessary
    end
end

_count_frame_reset_frame_count_if_necessary: fn
    br 121 ->
        init_frame_count
    end

    br _ ->
        # No reset necessary.
    end
end

# Game state
init: fn
    br ->
        init_should_game_run
        snake_init
        init_velocity
        init_next_position
        food_init
    end
end

update: fn
    br ->
        # The update logic does not run every frame.
        frame_count
        load
        2
        remainder_s32
        not
        should_game_run
        load
        and
        fn
            br 1 ->
                read_input
                handle_input
                update_positions
                food_eat
            end

            br _ ->
                # Nothing to do.
            end
        end
            eval
    end
end

# Game state - should game run
init_should_game_run: fn
    br ->
        1
        should_game_run
            store
    end
end

# Game state - velocity
init_velocity: fn
    br ->
        1
        0
        velocity
            vec_store
    end
end

# Game state - next position
init_next_position: fn
    br ->
        positions
        0
        vec_buf_get
        next_position
        vec_store
    end
end

update_next_position: fn
    br ->
        snake_head
        vec_x
        velocity
        vec_load
        vec_x
        add_s8
        snake_head
        vec_y
        velocity
        vec_load
        vec_y
        add_s8
        next_position
        vec_store
        next_position
        vec_load
        is_out_of_bounds
        fn
            br 1 ->
                next_position
                vec_load
                fn
                    br next_x, next_y ->
                        tile_field_size
                        vec_load
                        fn
                            br limit_x, limit_y ->
                                next_x
                                limit_x
                                handle_coordinate_smaller_than_zero
                                fn
                                    br next_x ->
                                        next_y
                                        limit_y
                                        handle_coordinate_smaller_than_zero
                                        fn
                                            br next_y ->
                                                next_x
                                                limit_x
                                                handle_coordinate_larger_than_limit
                                                fn
                                                    br next_x ->
                                                        next_y
                                                        limit_y
                                                        handle_coordinate_larger_than_limit
                                                        fn
                                                            br next_y ->
                                                                next_x
                                                                next_y
                                                                next_position
                                                                vec_store
                                                            end
                                                        end
                                                            eval
                                                    end
                                                end
                                                    eval
                                            end
                                        end
                                            eval
                                    end
                                end
                                    eval
                            end
                        end
                            eval
                    end
                end
                    eval
            end

            br _ ->
                # Not out of bounds. Nothing to do.
            end
        end
            eval
    end
end

handle_coordinate_smaller_than_zero: fn
    br coord, limit ->
        0
        coord
        greater_s8
        fn
            br coord_smaller_than_zero ->
                coord_smaller_than_zero
                fn
                    br 1 ->
                        coord limit add_s8
                    end

                    br _ ->
                        coord
                    end
                end
                    eval
            end
        end
            eval
    end
end

handle_coordinate_larger_than_limit: fn
    br coord, limit ->
        limit
        coord
        greater_u8
        fn
            br limit_greater_than_coord ->
                limit_greater_than_coord
                fn
                    br 0 ->
                        coord
                        limit
                        sub_s32
                    end

                    br 1 ->
                        coord
                    end
                end
                    eval
            end
        end
            eval
    end
end

# Game state - food
food_init: fn
    br ->
        negatable_random
        abs
        tile_field_size
        vec_load
        vec_x
        remainder_s32
        negatable_random
        abs
        tile_field_size
        vec_load
        vec_y
        remainder_s32
        food_position
        vec_store
    end
end

food_eat: fn
    br ->
        _food_collides_with_snake
        fn
            br 1 ->
                # The snake's head and the food are at the
                # same position.
                food_init
                grow_snake
            end

            br _ ->
            end
        end
            eval
    end
end

_food_collides_with_snake: fn
    br ->
        snake_head
        food_position
        vec_load
        vec_eq
        fn
            br head_collides ->
                food_position
                vec_load
                check_body_collision
                fn
                    br body_collides ->
                        head_collides
                        body_collides
                        add_s32
                        0
                        greater_s32
                    end
                end
                    eval
            end
        end
            eval
    end
end

# Game state - snake
snake_init: fn
    br ->
        3
        snake_length
           store

        positions
            vec_buf_init

        positions
        15
        15
            vec_buf_push
    end
end

snake_head: fn
    br ->
        positions vec_buf_last
    end
end

update_positions: fn
    br ->
        update_next_position
        snake_head
        check_body_collision
        fn
            br 0 ->
                positions
                next_position
                vec_load
                vec_buf_push
                pop_positions
            end

            br 1 ->
                # Collision. Do nothing.
            end
        end
            eval
    end
end

pop_positions: fn
    br ->
        positions
        vec_buf_len
        snake_length
        load
        greater_s32
        fn
            br 1 ->
                positions
                vec_buf_pop
                pop_positions
            end

            br _ ->
            end
        end
            eval
    end
end

grow_snake: fn
    br ->
        snake_length
        load
        1
        add_s32
        fn
            br snake_length_plus_growth ->
                snake_length_plus_growth
                positions
                vec_buf_capacity
                greater_s32
                fn
                    br 0 ->
                        snake_length_plus_growth
                        snake_length
                        store
                    end

                    br _ ->
                    end
                end
                    eval
            end
        end
            eval
    end
end

check_body_collision: fn
    br x, y ->
        x
        y
        0
        check_body_collision_inner
    end
end

check_body_collision_inner: fn
    br x, y, index ->
        positions
        vec_buf_len
        1
        sub_s32
        index
        greater_s32
        fn
            br 1 ->
                positions
                index
                vec_buf_get
                vec_x
                x
                eq
                fn
                    br x_matches ->
                        positions
                        index
                        vec_buf_get
                        vec_y
                        y
                        eq
                        fn
                            br y_matches ->
                                x_matches
                                y_matches
                                add_s32
                                2
                                eq
                                fn
                                    br 0 ->
                                        x
                                        y
                                        index
                                        1
                                        add_s32
                                        check_body_collision_inner
                                    end

                                    br _ ->
                                        1
                                    end
                                end
                                    eval
                            end
                        end
                            eval
                    end
                end
                    eval
            end

            br _ ->
                0
            end
        end
            eval
    end
end

# Input
handle_input: fn
    br 0 ->
        # No input available.
    end

    br 1 ->
        # up
        0
        -1
        s32_to_s8
        velocity
        vec_store
    end

    br 2 ->
        # left
        -1
        s32_to_s8
        0
        velocity
        vec_store
    end

    br 3 ->
        # down
        0 1 velocity vec_store
    end

    br 4 ->
        # right
        1 0 velocity vec_store
    end

    br _ ->
        # unexpected value
        brk
    end
end

# Memory map
tile_field_size: fn
    br ->
        0
    end
end

frame_count: fn
    br ->
        2
    end
end

should_game_run: fn
    br ->
        3
    end
end

velocity: fn
    br ->
        4
    end
end

next_position: fn
    br ->
        6
    end
end

food_position: fn
    br ->
        8
    end
end

snake_length: fn
    br ->
        10
    end
end

positions: fn
    br ->
        11
    end
end

# Utilities - Vector
vec_x: fn
    br x: Number, _: Number ->
        x
    end
end

vec_y: fn
    br _: Number, y: Number ->
        y
    end
end

vec_load: fn
    br address ->
        address
        load
        address
        1
        add_s32
        load
    end
end

vec_store: fn
    br x, y, address ->
        x
        address
        store
        y
        address
        1
        add_s32
        store
    end
end

vec_copy: fn
    br vx: Number, vy: Number ->
        vx
        vy
        vx
        vy
    end
end

vec_drop: fn
    br _, _ ->
    end
end

vec_eq: fn
    br ax, ay, bx, by ->
        ax
        bx
        eq
        ay
        by
        eq
        and
    end
end

# Utilities - Vector Buffer
vec_buf_init: fn
    br vec_buf ->
        0
        vec_buf _vec_buf_first
            store
        0
        vec_buf _vec_buf_next
            store
        64
        vec_buf _vec_buf_capacity
            store
    end
end

vec_buf_get: fn
    br vec_buf, index ->
        index
        2
        mul_u8_wrap
        fn
            br offset ->
                vec_buf
                _vec_buf_first
                load
                fn
                    br base ->
                        vec_buf
                        base
                        offset
                        _vec_buf_address
                        vec_load
                    end
                end
                    eval
            end
        end
            eval
    end
end

vec_buf_last: fn
    br vec_buf ->
        vec_buf
        vec_buf_len
        1
        sub_u8
        fn
            br index ->
                vec_buf
                index
                vec_buf_get
            end
        end
            eval
    end
end

vec_buf_push: fn
    br vec_buf, x, y ->
        vec_buf
        _vec_buf_next
        fn
            br next_addr ->
                vec_buf
                next_addr
                load
                0
                _vec_buf_address
                fn
                    br address ->
                        x
                        y
                        address
                        vec_store
                        next_addr
                        _vec_buf_inc_index
                    end
                end
                    eval
            end
        end
            eval
    end
end

vec_buf_pop: fn
    br vec_buf ->
        vec_buf
        _vec_buf_first
        _vec_buf_inc_index
    end
end

vec_buf_len: fn
    br vec_buf ->
        vec_buf
        _vec_buf_first
        load
        fn
            br first ->
                vec_buf
                _vec_buf_next
                load
                fn
                    br next ->
                        next
                        first
                        sub_u8_wrap
                        2
                        div_u8
                    end
                end
                    eval
            end
        end
            eval
    end
end

vec_buf_capacity: fn
    br vec_buf ->
        vec_buf
        _vec_buf_capacity
        load
        2
        div_s32
    end
end

_vec_buf_address: fn
    br vec_buf, base, offset ->
        # Compute the memory address of a location within the
        # vector buffer.
        #
        # Takes two arguments:
        #
        # - `base`, which is an index into the buffer, as
        #   opposed to a real address. It can be larger than any
        #   actual address within the buffer.
        # - `offset`, which is the offset of the desired address
        #   `from base`.
        base
        offset
            add_u8_wrap

        vec_buf
            _vec_buf_capacity
            load

        remainder_s32

        vec_buf
            _vec_buf_buffer

        add_u8_wrap
    end
end

_vec_buf_inc_index: fn
    br index_addr ->
        index_addr
            load
        2
            add_u8_wrap

        index_addr

        store
    end
end

_vec_buf_first: fn
    br vec_buf ->
        vec_buf
        0
            add_s32
    end
end

_vec_buf_next: fn
    br vec_buf ->
        vec_buf
        1
            add_s32
    end
end

_vec_buf_capacity: fn
    br vec_buf ->
        vec_buf
        2
            add_s32
    end
end

_vec_buf_buffer: fn
    br vec_buf ->
        vec_buf
        3
            add_s32
    end
end

# Utilities - Miscellaneous
negatable_random: fn
    br ->
        read_random
        _negatable_random_return_or_continue
    end
end

_negatable_random_return_or_continue: fn
    br -2147483648 ->
        # Negating the minimum number would result in an
        # integer overflow.
        negatable_random
    end

    br random ->
        random
    end
end

abs: fn
    br v ->
        v
        v
        -1
        greater_s32
        fn
            br v, 0 ->
                v
                    neg_s32
            end

            br v, _ ->
                v
            end
        end
            eval
    end
end
